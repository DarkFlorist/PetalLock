{"version":3,"file":"wire-types.js","sourceRoot":"","sources":["../../ts/tests/wire-types.ts"],"names":[],"mappings":"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","sourcesContent":["import * as funtypes from 'funtypes'\n\ntype UnionToIntersection<T> = (T extends unknown ? (k: T) => void : never) extends (k: infer I) => void ? I : never\n\nconst BigIntParser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{1,64})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded number.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.`}\n\t\treturn { success: true, value: `0x${value.toString(16)}` }\n\t},\n}\n\nconst SmallIntParser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{1,64})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded number.` }\n\t\tif (BigInt(value) >= 2n**64n) return { success: false, message: `${value} must be smaller than 2^64.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (value >= 2n**64n) return { success: false, message: `${value} must be smaller than 2^64.` }\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.`}\n\t\treturn { success: true, value: `0x${value.toString(16)}` }\n\t},\n}\n\nconst AddressParser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{40})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded address.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.`}\n\t\treturn { success: true, value: `0x${value.toString(16).padStart(40, '0')}` }\n\t},\n}\n\nconst Bytes32Parser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{64})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded 32 byte value.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.`}\n\t\treturn { success: true, value: `0x${value.toString(16).padStart(64, '0')}` }\n\t},\n}\n\nconst Bytes256Parser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{512})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded 256 byte value.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.`}\n\t\treturn { success: true, value: `0x${value.toString(16).padStart(512, '0')}` }\n\t},\n}\nconst Bytes16Parser: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{16})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded 256 byte value.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${typeof value} is not a bigint.`}\n\t\treturn { success: true, value: `0x${value.toString(16).padStart(16, '0')}` }\n\t},\n}\n\nexport const BytesParser: funtypes.ParsedValue<funtypes.String, Uint8Array>['config'] = {\n\tparse: value => {\n\t\tconst match = /^(?:0x)?([a-fA-F0-9]*)$/.exec(value)\n\t\tif (match === null) return { success: false, message: `Expected a hex string encoded byte array with an optional '0x' prefix but received ${ value }` }\n\t\tconst normalized = match[1]\n\t\tif (normalized === undefined) return { success: false, message: `Expected a hex string encoded byte array with an optional '0x' prefix but received ${ value }` }\n\t\tif (normalized.length % 2) return { success: false, message: 'Hex string encoded byte array must be an even number of charcaters long.' }\n\t\tconst bytes = new Uint8Array(normalized.length / 2)\n\t\tfor (let i = 0; i < normalized.length; i += 2) {\n\t\t\tbytes[i/2] = Number.parseInt(`${ normalized[i] }${ normalized[i + 1] }`, 16)\n\t\t}\n\t\treturn { success: true, value: new Uint8Array(bytes) }\n\t},\n\tserialize: value => {\n\t\tif (!(value instanceof Uint8Array)) return { success: false, message: `${typeof value} is not a Uint8Array.`}\n\t\tlet result = ''\n\t\tfor (let i = 0; i < value.length; ++i) {\n\t\t\tconst val = value[i]\n\t\t\tif (val === undefined) return { success: false, message: `${typeof value} is not a Uint8Array.`}\n\t\t\tresult += ('0' + val.toString(16)).slice(-2)\n\t\t}\n\t\treturn { success: true, value: `0x${result}` }\n\t}\n}\n\nconst TimestampParser: funtypes.ParsedValue<funtypes.String, Date>['config'] = {\n\tparse: value => {\n\t\tif (!/^0x([a-fA-F0-9]{0,8})$/.test(value)) return { success: false, message: `${value} is not a hex string encoded timestamp.` }\n\t\treturn { success: true, value: new Date(Number.parseInt(value, 16) * 1000) }\n\t},\n\tserialize: value => {\n\t\tif (!(value instanceof Date)) return { success: false, message: `${typeof value} is not a Date.`}\n\t\treturn { success: true, value: `0x${Math.floor(value.valueOf() / 1000).toString(16)}` }\n\t},\n}\n\nconst OptionalBytesParser: funtypes.ParsedValue<funtypes.Union<[funtypes.String, funtypes.Literal<undefined>]>, Uint8Array>['config'] = {\n\tparse: value => BytesParser.parse(value || '0x'),\n\tserialize: value => BytesParser.serialize!(value || new Uint8Array()),\n}\n\nexport const LiteralConverterParserFactory: <TInput, TOutput> (input: TInput, output: TOutput) => funtypes.ParsedValue<funtypes.Runtype<TInput>, TOutput>['config'] = (input, output) => {\n\treturn {\n\t\tparse: value => (value === input) ? { success: true, value: output } : { success: false, message: `${value} was expected to be literal.` },\n\t\tserialize: value => (value === output) ? { success: true, value: input } : { success: false, message: `${value} was expected to be literal.`  }\n\t}\n}\n\nconst BigIntParserNonHex: funtypes.ParsedValue<funtypes.String, bigint>['config'] = {\n\tparse: value => {\n\t\tif (!/^[0-9]+$/.test(value)) return { success: false, message: `${ value } is not a string encoded number.` }\n\t\treturn { success: true, value: BigInt(value) }\n\t},\n\tserialize: value => {\n\t\tif (typeof value !== 'bigint') return { success: false, message: `${ typeof value } is not a bigint.`}\n\t\treturn { success: true, value: `${ value.toString() }` }\n\t},\n}\n\nexport const NonHexBigInt = funtypes.String.withParser(BigIntParserNonHex)\nexport type NonHexBigInt = funtypes.Static<typeof NonHexBigInt>\n\n//\n// Ethereum\n//\n\nexport const EthereumQuantity = funtypes.String.withParser(BigIntParser)\nexport type EthereumQuantity = funtypes.Static<typeof EthereumQuantity>\n\nexport const EthereumQuantitySmall = funtypes.String.withParser(SmallIntParser)\nexport type EthereumQuantitySmall = funtypes.Static<typeof EthereumQuantitySmall>\n\nexport const EthereumData = funtypes.String.withParser(BytesParser)\nexport type EthereumData = funtypes.Static<typeof EthereumData>\n\nexport const EthereumAddress = funtypes.String.withParser(AddressParser)\nexport type EthereumAddress = funtypes.Static<typeof EthereumAddress>\n\nexport type OptionalEthereumAddress = funtypes.Static<typeof OptionalEthereumAddress>\nexport const OptionalEthereumAddress = funtypes.Union(EthereumAddress, funtypes.Undefined)\n\nexport const EthereumAddressOrMissing = funtypes.Union(EthereumAddress, funtypes.Literal('missing').withParser(LiteralConverterParserFactory('missing', undefined)))\nexport type EthereumAddressOrMissing = funtypes.Static<typeof EthereumAddressOrMissing>\n\nexport const EthereumBytes32 = funtypes.String.withParser(Bytes32Parser)\nexport type EthereumBytes32 = funtypes.Static<typeof EthereumBytes32>\n\nexport const EthereumBytes256 = funtypes.String.withParser(Bytes256Parser)\nexport type EthereumBytes256 = funtypes.Static<typeof EthereumBytes256>\n\nconst EthereumBytes16 = funtypes.String.withParser(Bytes16Parser)\ntype EthereumBytes16 = funtypes.Static<typeof EthereumBytes16>\n\nexport const EthereumTimestamp = funtypes.String.withParser(TimestampParser)\nexport type EthereumTimestamp = funtypes.Static<typeof EthereumTimestamp>\n\nexport const EthereumBlockTag = funtypes.Union(EthereumQuantitySmall, EthereumBytes32, funtypes.Literal('latest'), funtypes.Literal('pending'))\nexport type EthereumBlockTag = funtypes.Static<typeof EthereumBlockTag>\n\nexport const EthereumInput = funtypes.Union(funtypes.String, funtypes.Undefined).withParser(OptionalBytesParser)\nexport type EthereumInput = funtypes.Static<typeof EthereumInput>\n\nexport const EthereumAccessList = funtypes.ReadonlyArray(\n\tfuntypes.ReadonlyObject({\n\t\taddress: EthereumAddress,\n\t\tstorageKeys: funtypes.ReadonlyArray(EthereumBytes32)\n\t}).asReadonly()\n)\nexport type EthereumAccessList = funtypes.Static<typeof EthereumAccessList>\n\ntype EthereumUnsignedTransactionLegacy = funtypes.Static<typeof EthereumUnsignedTransactionLegacy>\nconst EthereumUnsignedTransactionLegacy = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\ttype: funtypes.Union(funtypes.Literal('0x0').withParser(LiteralConverterParserFactory('0x0', 'legacy' as const)), funtypes.Literal(undefined).withParser(LiteralConverterParserFactory(undefined, 'legacy' as const))),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tgasPrice: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t}).asReadonly(),\n\tfuntypes.Partial({\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly()\n)\n\ntype EthereumUnsignedTransaction2930 = funtypes.Static<typeof EthereumUnsignedTransaction2930>\nconst EthereumUnsignedTransaction2930 = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\ttype: funtypes.Literal('0x1').withParser(LiteralConverterParserFactory('0x1', '2930' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tgasPrice: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly(),\n\tfuntypes.Partial({\n\t\taccessList: EthereumAccessList,\n\t}).asReadonly(),\n)\n\nexport type EthereumUnsignedTransaction1559 = funtypes.Static<typeof EthereumUnsignedTransaction1559>\nexport const EthereumUnsignedTransaction1559 = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\ttype: funtypes.Literal('0x2').withParser(LiteralConverterParserFactory('0x2', '1559' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tmaxFeePerGas: EthereumQuantity,\n\t\tmaxPriorityFeePerGas: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly(),\n\tfuntypes.Partial({\n\t\taccessList: EthereumAccessList,\n\t}).asReadonly(),\n)\n\ntype EthereumUnsignedTransaction4844  = funtypes.Static<typeof EthereumUnsignedTransaction4844>\nconst EthereumUnsignedTransaction4844 = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\ttype: funtypes.Literal('0x3').withParser(LiteralConverterParserFactory('0x3', '4844' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tmaxFeePerGas: EthereumQuantity,\n\t\tmaxPriorityFeePerGas: EthereumQuantity,\n\t\tgas: EthereumQuantity,\n\t\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t\tmaxFeePerBlobGas: EthereumQuantity,\n\t\tblobVersionedHashes: funtypes.ReadonlyArray(EthereumBytes32),\n\t}).asReadonly(),\n\tfuntypes.Partial({\n\t\taccessList: EthereumAccessList,\n\t}).asReadonly(),\n)\n\nexport type EthereumUnsignedTransaction = funtypes.Static<typeof EthereumUnsignedTransaction>\nexport const EthereumUnsignedTransaction = funtypes.Union(EthereumUnsignedTransactionLegacy, EthereumUnsignedTransaction2930, EthereumUnsignedTransaction1559, EthereumUnsignedTransaction4844)\n\ntype OptionalEthereumUnsignedTransaction1559 = funtypes.Static<typeof EthereumUnsignedTransaction1559>\nconst OptionalEthereumUnsignedTransaction1559 = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\ttype: funtypes.Literal('0x2').withParser(LiteralConverterParserFactory('0x2', '1559' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t}).asReadonly(),\n\tfuntypes.Partial({\n\t\tgas: EthereumQuantity,\n\t\tmaxFeePerGas: EthereumQuantity,\n\t\tmaxPriorityFeePerGas: EthereumQuantity,\n\t\taccessList: EthereumAccessList,\n\t}).asReadonly(),\n)\n\ntype OptionalEthereumUnsignedTransaction4844 = funtypes.Static<typeof OptionalEthereumUnsignedTransaction4844>\nconst OptionalEthereumUnsignedTransaction4844 = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\ttype: funtypes.Literal('0x3').withParser(LiteralConverterParserFactory('0x3', '4844' as const)),\n\t\tfrom: EthereumAddress,\n\t\tnonce: EthereumQuantity,\n\t\tto: funtypes.Union(EthereumAddress, funtypes.Null),\n\t\tvalue: EthereumQuantity,\n\t\tinput: EthereumInput,\n\t\tchainId: EthereumQuantity,\n\t\tmaxFeePerBlobGas: EthereumQuantity,\n\t\tblobVersionedHashes: funtypes.ReadonlyArray(EthereumBytes32),\n\t}).asReadonly(),\n\tfuntypes.Partial({\n\t\tgas: EthereumQuantity,\n\t\tmaxFeePerGas: EthereumQuantity,\n\t\tmaxPriorityFeePerGas: EthereumQuantity,\n\t\taccessList: EthereumAccessList,\n\t}).asReadonly(),\n)\n\nexport type OptionalEthereumUnsignedTransaction = funtypes.Static<typeof OptionalEthereumUnsignedTransaction>\nexport const OptionalEthereumUnsignedTransaction = funtypes.Union(EthereumUnsignedTransactionLegacy, EthereumUnsignedTransaction2930, OptionalEthereumUnsignedTransaction1559, OptionalEthereumUnsignedTransaction4844)\n\nconst EthereumTransaction2930And1559And4844Signature = funtypes.Intersect(\n\tfuntypes.ReadonlyObject({\n\t\tr: EthereumQuantity,\n\t\ts: EthereumQuantity,\n\t\thash: EthereumBytes32,\n\t}),\n\tfuntypes.Union(\n\t\tfuntypes.ReadonlyObject({ yParity: funtypes.Union(funtypes.Literal('0x0').withParser(LiteralConverterParserFactory('0x0', 'even' as const)), funtypes.Literal('0x1').withParser(LiteralConverterParserFactory('0x1', 'odd' as const))) }),\n\t\tfuntypes.ReadonlyObject({ v: EthereumQuantity }),\n\t)\n)\n\ntype MessageSignature = funtypes.Static<typeof MessageSignature>\nconst MessageSignature = funtypes.ReadonlyObject({\n\tr: EthereumQuantity,\n\ts: EthereumQuantity,\n\thash: EthereumBytes32,\n\tv: EthereumQuantity,\n})\n\ntype EthereumTransactionLegacySignature = funtypes.Static<typeof EthereumTransactionLegacySignature>\nconst EthereumTransactionLegacySignature = funtypes.Intersect(\n\tMessageSignature,\n\tfuntypes.Union(\n\t\tfuntypes.ReadonlyObject({\n\t\t\tv: EthereumQuantity,\n\t\t}),\n\t\tfuntypes.ReadonlyObject({\n\t\t\tyParity: funtypes.Union(funtypes.Literal('0x0').withParser(LiteralConverterParserFactory('0x0', 'even' as const)), funtypes.Literal('0x1').withParser(LiteralConverterParserFactory('0x1', 'odd' as const))),\n\t\t\tchainId: EthereumQuantity,\n\t\t})\n\t)\n)\n\ntype EthereumSignedTransactionLegacy = funtypes.Static<typeof EthereumSignedTransactionLegacy>\nconst EthereumSignedTransactionLegacy = funtypes.Intersect(\n\tEthereumUnsignedTransactionLegacy,\n\tEthereumTransactionLegacySignature,\n)\n\ntype EthereumSignedTransaction2930 = funtypes.Static<typeof EthereumSignedTransaction2930>\nconst EthereumSignedTransaction2930 = funtypes.Intersect(\n\tEthereumUnsignedTransaction2930,\n\tEthereumTransaction2930And1559And4844Signature,\n)\n\nexport type EthereumSignedTransaction1559 = funtypes.Static<typeof EthereumSignedTransaction1559>\nexport const EthereumSignedTransaction1559 = funtypes.Intersect(\n\tEthereumUnsignedTransaction1559,\n\tEthereumTransaction2930And1559And4844Signature,\n)\n\ntype EthereumSignedTransaction4844 = funtypes.Static<typeof EthereumSignedTransaction4844>\nconst EthereumSignedTransaction4844 = funtypes.Intersect(\n\tEthereumUnsignedTransaction4844,\n\tEthereumTransaction2930And1559And4844Signature,\n)\n\nexport type EthereumSignedTransaction = funtypes.Static<typeof EthereumSignedTransaction>\nexport const EthereumSignedTransaction = funtypes.Union(EthereumSignedTransactionLegacy, EthereumSignedTransaction2930, EthereumSignedTransaction1559, EthereumSignedTransaction4844)\n\nexport type EthereumSignedTransactionWithBlockData = funtypes.Static<typeof EthereumSignedTransactionWithBlockData>\nexport const EthereumSignedTransactionWithBlockData = funtypes.Intersect(\n\tfuntypes.Union(\n\t\tEthereumSignedTransactionLegacy,\n\t\tEthereumSignedTransaction2930,\n\t\tfuntypes.Intersect(EthereumSignedTransaction1559, funtypes.ReadonlyObject({ gasPrice: EthereumQuantity })),\n\t\tfuntypes.Intersect(EthereumSignedTransaction4844, funtypes.ReadonlyObject({ gasPrice: EthereumQuantity })),\n\t),\n\tfuntypes.ReadonlyObject({\n\t\tdata: EthereumInput,\n\t\tblockHash: funtypes.Union(EthereumBytes32, funtypes.Null),\n\t\tblockNumber: funtypes.Union(EthereumQuantity, funtypes.Null),\n\t\ttransactionIndex: funtypes.Union(EthereumQuantity, funtypes.Null),\n\t\tv: EthereumQuantity,\n\t})\n)\n\ntype EthereumWithdrawal = funtypes.Static<typeof EthereumWithdrawal>\nconst EthereumWithdrawal = funtypes.ReadonlyObject({\n\tindex: EthereumQuantity,\n\tvalidatorIndex: EthereumQuantity,\n\taddress: EthereumAddress,\n\tamount: EthereumQuantity,\n})\n\ntype EthereumBlockHeaderWithoutTransactions = funtypes.Static<typeof EthereumBlockHeaderWithoutTransactions>\nconst EthereumBlockHeaderWithoutTransactions = funtypes.Intersect(\n\tfuntypes.MutablePartial({\n\t\tauthor: EthereumAddress,\n\t}),\n\tfuntypes.Intersect(\n\t\tfuntypes.ReadonlyObject({\n\t\t\tdifficulty: EthereumQuantity,\n\t\t\textraData: EthereumData,\n\t\t\tgasLimit: EthereumQuantity,\n\t\t\tgasUsed: EthereumQuantity,\n\t\t\thash: EthereumBytes32,\n\t\t\tlogsBloom: EthereumBytes256,\n\t\t\tminer: EthereumAddress,\n\t\t\tmixHash: EthereumBytes32,\n\t\t\tnonce: EthereumBytes16,\n\t\t\tnumber: EthereumQuantity,\n\t\t\tparentHash: EthereumBytes32,\n\t\t\treceiptsRoot: EthereumBytes32,\n\t\t\tsha3Uncles: EthereumBytes32,\n\t\t\tstateRoot: EthereumBytes32,\n\t\t\ttimestamp: EthereumTimestamp,\n\t\t\tsize: EthereumQuantity,\n\t\t\ttotalDifficulty: EthereumQuantity,\n\t\t\tuncles: funtypes.ReadonlyArray(EthereumBytes32),\n\t\t\tbaseFeePerGas: funtypes.Union(EthereumQuantity, funtypes.Undefined),\n\t\t\ttransactionsRoot: EthereumBytes32,\n\t\t}),\n\t\tfuntypes.ReadonlyPartial({\n\t\t\texcessBlobGas: EthereumQuantity,\n\t\t\tblobGasUsed: EthereumQuantity,\n\t\t\tparentBeaconBlockRoot: EthereumBytes32,\n\t\t\twithdrawalsRoot: EthereumBytes32, // missing from old block\n\t\t\twithdrawals: funtypes.ReadonlyArray(EthereumWithdrawal), // missing from old block\n\t\t})\n\t)\n)\n\nexport type EthereumBlockHeaderWithTransactionHashes = funtypes.Static<typeof EthereumBlockHeaderWithTransactionHashes>\nexport const EthereumBlockHeaderWithTransactionHashes = funtypes.Union(funtypes.Null, funtypes.Intersect(\n\tEthereumBlockHeaderWithoutTransactions,\n\tfuntypes.ReadonlyObject({ transactions: funtypes.ReadonlyArray(EthereumBytes32) })\n))\n\nexport type EthereumBlockHeader = funtypes.Static<typeof EthereumBlockHeader>\nexport const EthereumBlockHeader = funtypes.Intersect(\n\tEthereumBlockHeaderWithoutTransactions,\n\tfuntypes.ReadonlyObject({ transactions: funtypes.ReadonlyArray(EthereumSignedTransaction) })\n)\n\n//\n// Helpers\n//\n\nexport function serialize<T, U extends funtypes.Codec<T>>(funtype: U, value: T) {\n\treturn funtype.serialize(value) as ToWireType<U>\n}\n\ntype ToWireType<T> =\n\tT extends funtypes.Intersect<infer U> ? UnionToIntersection<{ [I in keyof U]: ToWireType<U[I]> }[number]>\n\t: T extends funtypes.Union<infer U> ? { [I in keyof U]: ToWireType<U[I]> }[number]\n\t: T extends funtypes.Record<infer U, infer V> ? Record<funtypes.Static<U>, ToWireType<V>>\n\t: T extends funtypes.Partial<infer U, infer V> ? V extends true ? { readonly [K in keyof U]?: ToWireType<U[K]> } : { [K in keyof U]?: ToWireType<U[K]> }\n\t: T extends funtypes.Object<infer U, infer V> ? V extends true ? { readonly [K in keyof U]: ToWireType<U[K]> } : { [K in keyof U]: ToWireType<U[K]> }\n\t: T extends funtypes.Readonly<funtypes.Tuple<infer U>> ? { readonly [P in keyof U]: ToWireType<U[P]>}\n\t: T extends funtypes.Tuple<infer U> ? { [P in keyof U]: ToWireType<U[P]>}\n\t: T extends funtypes.ReadonlyArray<infer U> ? readonly ToWireType<U>[]\n\t: T extends funtypes.Array<infer U> ? ToWireType<U>[]\n\t: T extends funtypes.ParsedValue<infer U, infer _> ? ToWireType<U>\n\t: T extends funtypes.Codec<infer U> ? U\n\t: never\n"]}