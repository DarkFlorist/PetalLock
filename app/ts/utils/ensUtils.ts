import { createPublicClient, createWalletClient, custom, encodeAbiParameters, http, labelhash, namehash, publicActions, ReadContractErrorType } from 'viem'
import { mainnet } from 'viem/chains'
import { ENS_WRAPPER_ABI } from '../abi/ens_wrapper_abi.js'
import 'viem/window'
import { ENS_REGISTRY_ABI } from '../abi/ens_registry_abi.js'
import { assertNever, splitEnsStringToSubdomainPath } from './utilities.js'
import { ENS_PUBLIC_RESOLVER_ABI } from '../abi/ens_public_resolver_abi.js'
import { burnAddresses, CAN_DO_EVERYTHING, ENS_ETHEREUM_NAME_SERVICE, ENS_FLAGS, ENS_PUBLIC_RESOLVER, ENS_REGISTRY_WITH_FALLBACK, ENS_TOKEN_WRAPPER } from './constants.js'
import { AccountAddress, DomainInfo, EnsFuseName } from '../types/types.js'
import { ENS_ETHEREUM_NAME_SERVICE_ABI } from '../abi/ens_ethereum_name_service_abi.js'
import { tryEncodeContentHash } from './contenthash.js'

export const extractENSFuses = (uint: bigint): readonly EnsFuseName[] => {
	if (uint === CAN_DO_EVERYTHING) return ['Can Do Everything']
	const result: EnsFuseName[] = []
	for (const flag of ENS_FLAGS) {
		if ((uint & flag.value) === flag.value && flag.value !== CAN_DO_EVERYTHING) {
			result.push(flag.name)
		}
	}
	return result
}

export const fuseNamesToUint = (names: readonly EnsFuseName[]): number => {
	let result = 0
	for (const name of names) {
		const flag = ENS_FLAGS.find(flag => flag.name === name)
		if (flag) {
			result |= Number(flag.value)
		}
	}
	return result
}

export const requestAccounts = async () => {
	if (window.ethereum === undefined) throw new Error('no window.ethereum injected')
	const reply = await window.ethereum.request({ method: 'eth_requestAccounts', params: undefined })
	return reply[0]
}

export const getAccounts = async () => {
	if (window.ethereum === undefined) throw new Error('no window.ethereum injected')
	const reply = await window.ethereum.request({ method: 'eth_accounts', params: undefined })
	return reply[0]
}

const createReadClient = (account: AccountAddress | undefined) => {
	if (window.ethereum === undefined || account === undefined) {
		return createPublicClient({ chain: mainnet, transport: http('https://geth.dark.florist', { batch: { wait: 100 } }) })
	}
	return createWalletClient({ chain: mainnet, transport: custom(window.ethereum) }).extend(publicActions)
}

const createWriteClient = (account: AccountAddress) => {
	if (window.ethereum === undefined) throw new Error('no window.ethereum injected')
	if (account === undefined) throw new Error('no account!')
	return createWalletClient({ account, chain: mainnet, transport: custom(window.ethereum) }).extend(publicActions)
}

const getDomainInfo = async (account: AccountAddress | undefined, nameHash: `0x${ string }`, label: string, token: `0x${ string }`, subDomain: string): Promise<DomainInfo> => {
	const client = createReadClient(account)
	const isWrappedPromise = client.readContract({
		address: ENS_TOKEN_WRAPPER,
		abi: ENS_WRAPPER_ABI, 
		functionName: 'isWrapped',
		args: [nameHash]
	})

	const ownerPromise = client.readContract({
		address: ENS_TOKEN_WRAPPER,
		abi: ENS_WRAPPER_ABI, 
		functionName: 'ownerOf',
		args: [BigInt(nameHash)]
	})
	
	const dataPromise = client.readContract({
		address: ENS_TOKEN_WRAPPER,
		abi: ENS_WRAPPER_ABI, 
		functionName: 'getData',
		args: [BigInt(nameHash)]
	})

	const registeredPromise = client.readContract({
		address: ENS_REGISTRY_WITH_FALLBACK,
		abi: ENS_REGISTRY_ABI, 
		functionName: 'recordExists',
		args: [nameHash]
	})

	const contentHashPromise = client.readContract({
		address: ENS_PUBLIC_RESOLVER,
		abi: ENS_PUBLIC_RESOLVER_ABI, 
		functionName: 'contenthash',
		args: [nameHash]
	})
	const getRegistryOwner = async () => {
		try {
			return await client.readContract({
				address: ENS_ETHEREUM_NAME_SERVICE,
				abi: ENS_ETHEREUM_NAME_SERVICE_ABI,
				functionName: 'ownerOf',
				args: [BigInt(token)]
			})
		} catch (e) {
			const error = e as ReadContractErrorType
			switch(error.name) {
				case 'ContractFunctionExecutionError': return `0x0000000000000000000000000000000000000000`
			}
		}
	}

	const managerPromise = client.readContract({
		address: ENS_REGISTRY_WITH_FALLBACK,
		abi: ENS_REGISTRY_ABI,
		functionName: 'owner',
		args: [nameHash]
	})

	const registeryOwnerPromise = getRegistryOwner()
	const data = await dataPromise
	return {
		nameHash,
		isWrapped: await isWrappedPromise,
		owner: await ownerPromise,
		registeryOwner: await registeryOwnerPromise,
		data,
		fuses: extractENSFuses(BigInt(data[1])),
		expiry: data[2],
		label,
		registered: await registeredPromise,
		contentHash: await contentHashPromise,
		manager: await managerPromise,
		subDomain,
	}
}

export const getDomainInfos = async (account: AccountAddress | undefined, name: string): Promise<DomainInfo[]> => {
	const subDomainPath = splitEnsStringToSubdomainPath(name)
	return await Promise.all(subDomainPath.map((subDomain) => {
		const [label] = subDomain.split('.')
		if (label === undefined) throw new Error('undefined label')
		const nameHash = namehash(subDomain)
		const token = labelhash(subDomain.slice(0, subDomain.indexOf('.')))
		return getDomainInfo(account, nameHash, label, token, subDomain)
	}))
}

export const parentFuseToBurn = 'Cannot Unwrap Name' as const

export const doWeNeedToBurnParentFuses = (parentInfo: DomainInfo) => {
	if (!parentInfo.isWrapped) return true
	return !parentInfo.fuses.includes(parentFuseToBurn)
}

export const mandatoryChildFusesToBurn = ['Parent Domain Cannot Control'] as const

export const childFusesToBurn = ['Cannot Unwrap Name', 'Cannot Burn Fuses', 'Cannot Set Resolver', 'Cannot Set Time To Live', 'Cannot Create Subdomain', 'Parent Domain Cannot Control', 'Cannot Approve', 'Can Extend Expiry'] as const
export const doWeNeedToBurnChildFuses = (childInfo: DomainInfo) => {
	if (!childInfo.isWrapped) return true
	for (const requiredFuse of mandatoryChildFusesToBurn) {
		if (!childInfo.fuses.includes(requiredFuse)) return true
	}
	return false
}

export const isValidEnsSubDomain = (subdomain: string): boolean => {
	// Regex to validate the ENS subdomain with infinite subdomains support
	const ensRegex = /^(?!-)([a-zA-Z0-9-]+\.)*(?!-)[a-zA-Z0-9-]+(?<!-)\.eth$/
	return ensRegex.test(subdomain)
}

export const isChildOwnershipBurned = (childInfo: DomainInfo) => {
	return burnAddresses.map((b) => BigInt(b)).includes(BigInt(childInfo.owner)) && childInfo.isWrapped
}

export const deployPetalLock = async (account: AccountAddress) => {
	const client = createWriteClient(account)
	const hash = await client.deployContract({
		abi: [],
		account,
		bytecode: `0x6080604052348015600f57600080fd5b506117d18061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bc197c811461003b578063f23a6e6114610083575b600080fd5b61004e61004936600461119c565b610096565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b61004e610091366004611256565b610203565b60003373d4416b13d2b3a9abae7acd5d6c2bbdbe25686401146101005760405162461bcd60e51b815260206004820152601960248201527f537570706f727473206f6e6c79205772617070656420454e530000000000000060448201526064015b60405180910390fd5b600080600084806020019051810190610119919061138c565b92509250925060005b87518110156101c85761014e888281518110610140576101406114b0565b6020026020010151846102ba565b6101c05760405162461bcd60e51b815260206004820152603060248201527f53656e7420746f6b656e20646f6573206e6f7420657869737420696e2073756260448201527f646f6d61696e526f7574654e6f6465730000000000000000000000000000000060648201526084016100f7565b600101610122565b506101d588848484610308565b507fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b60006001600160a01b03851615801561022457506001600160a01b03861630145b801561024357503373d4416b13d2b3a9abae7acd5d6c2bbdbe25686401145b61028f5760405162461bcd60e51b815260206004820152601f60248201527f446f206e6f742073656e6420746f6b656e7320746f20506574616c4c6f636b0060448201526064016100f7565b507ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b6000805b82518110156102fc57838382815181106102da576102da6114b0565b602002602001015160001c036102f4576001915050610302565b6001016102be565b50600090505b92915050565b81518351146103595760405162461bcd60e51b815260206004820152601b60248201527f696e707574206172726179206c656e677468206d69736d61746368000000000060448201526064016100f7565b60006001835161036991906114dc565b905060005b8451811015610b2957600084828151811061038b5761038b6114b0565b602002602001015190506e0c2e074ec69a0dfb2997ba6c7d2e1e6001600160a01b031663f79fe538826040518263ffffffff1660e01b81526004016103d291815260200190565b602060405180830381865afa1580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041391906114ef565b6106da57600082116104675760405162461bcd60e51b815260206004820152601a60248201527f6669727374207265636f7264206e65656420746f20657869737400000000000060448201526064016100f7565b600073d4416b13d2b3a9abae7acd5d6c2bbdbe25686401630178fe3f8761048f6001876114dc565b8151811061049f5761049f6114b0565b602002602001015160001c6040518263ffffffff1660e01b81526004016104c891815260200190565b606060405180830381865afa1580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610509919061152a565b9250505060008660018561051d91906114dc565b8151811061052d5761052d6114b0565b602002602001015190508484036106015773d4416b13d2b3a9abae7acd5d6c2bbdbe256864016001600160a01b03166324c1af44828a8781518110610574576105746114b0565b60200260200101513073231b0ee14048e9dccd1d247744d114a4eb5e8e63600080896040518863ffffffff1660e01b81526004016105b897969594939291906115ac565b6020604051808303816000875af11580156105d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fb919061160d565b506106d3565b73d4416b13d2b3a9abae7acd5d6c2bbdbe256864016001600160a01b03166324c1af44828a8781518110610637576106376114b0565b60200260200101513073231b0ee14048e9dccd1d247744d114a4eb5e8e63600062010000600161ffff1661066b9190611626565b896040518863ffffffff1660e01b815260040161068e97969594939291906115ac565b6020604051808303816000875af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d1919061160d565b505b5050610b1f565b8282036106e75750610b21565b6040517ffd0cd0d90000000000000000000000000000000000000000000000000000000081526004810182905273d4416b13d2b3a9abae7acd5d6c2bbdbe256864019063fd0cd0d990602401602060405180830381865afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077491906114ef565b6107c05760405162461bcd60e51b815260206004820152601060248201527f6e6f6465206e6f7420777261707065640000000000000000000000000000000060448201526064016100f7565b600073d4416b13d2b3a9abae7acd5d6c2bbdbe256864016001600160a01b0316630178fe3f8785815181106107f7576107f76114b0565b602002602001015160001c6040518263ffffffff1660e01b815260040161082091815260200190565b606060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610861919061152a565b509150508260000361092a576001818116146109255773d4416b13d2b3a9abae7acd5d6c2bbdbe256864016001600160a01b031663402906fc8785815181106108ac576108ac6114b0565b602002602001015160016040518363ffffffff1660e01b81526004016108e092919091825261ffff16602082015260400190565b6020604051808303816000875af11580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611642565b505b610b1d565b610938620100006001611626565b63ffffffff1661094c620100006001611626565b821663ffffffff1614610b1d57600073d4416b13d2b3a9abae7acd5d6c2bbdbe25686401630178fe3f886109816001886114dc565b81518110610991576109916114b0565b602002602001015160001c6040518263ffffffff1660e01b81526004016109ba91815260200190565b606060405180830381865afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb919061152a565b925073d4416b13d2b3a9abae7acd5d6c2bbdbe2568640191506333c69ea9905088610a276001886114dc565b81518110610a3757610a376114b0565b60200260200101518a8781518110610a5157610a516114b0565b6020026020010151604051602001610a69919061165d565b60408051601f198184030181529190528051602090910120610a8f620100006001611626565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526004810193909352602483019190915263ffffffff16604482015267ffffffffffffffff84166064820152608401600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b50505050505b505b505b60010161036e565b5073231b0ee14048e9dccd1d247744d114a4eb5e8e636001600160a01b031663304e6ade848381518110610b5f57610b5f6114b0565b6020026020010151846040518363ffffffff1660e01b8152600401610b85929190611679565b600060405180830381600087803b158015610b9f57600080fd5b505af1158015610bb3573d6000803e3d6000fd5b506000925073d4416b13d2b3a9abae7acd5d6c2bbdbe256864019150630178fe3f905085610be26001866114dc565b81518110610bf257610bf26114b0565b602002602001015160001c6040518263ffffffff1660e01b8152600401610c1b91815260200190565b606060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c919061152a565b925073d4416b13d2b3a9abae7acd5d6c2bbdbe2568640191506333c69ea9905085610c886001866114dc565b81518110610c9857610c986114b0565b6020026020010151878581518110610cb257610cb26114b0565b6020026020010151604051602001610cca919061165d565b6040516020818303038152906040528051906020012062040000604061ffff166201000060206010600860026001610d02919061169a565b610d0c919061169a565b610d16919061169a565b610d20919061169a565b61ffff16610d2e9190611626565b610d389190611626565b610d429190611626565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526004810193909352602483019190915263ffffffff16604482015267ffffffffffffffff84166064820152608401600060405180830381600087803b158015610db657600080fd5b505af1158015610dca573d6000803e3d6000fd5b5050505073d4416b13d2b3a9abae7acd5d6c2bbdbe256864016001600160a01b031663f242432a3073deaddeaddeaddeaddeaddeaddeaddeaddeaddead878681518110610e1957610e196114b0565b602002602001015160001c6001604051806020016040528060008152506040518663ffffffff1660e01b8152600401610e569594939291906116b4565b600060405180830381600087803b158015610e7057600080fd5b505af1158015610e84573d6000803e3d6000fd5b50505050600060018551610e9891906114dc565b67ffffffffffffffff811115610eb057610eb061104b565b604051908082528060200260200182016040528015610ed9578160200160208202803683370190505b5090506000815167ffffffffffffffff811115610ef857610ef861104b565b604051908082528060200260200182016040528015610f21578160200160208202803683370190505b50905060005b8251811015610f9257868181518110610f4257610f426114b0565b602002602001015160001c838281518110610f5f57610f5f6114b0565b6020026020010181815250506001828281518110610f7f57610f7f6114b0565b6020908102919091010152600101610f27565b50604080516020810182526000815290517f2eb2c2d600000000000000000000000000000000000000000000000000000000815273d4416b13d2b3a9abae7acd5d6c2bbdbe2568640191632eb2c2d691610ff79130918d918891889190600401611738565b600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b038116811461104857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561108a5761108a61104b565b604052919050565b600067ffffffffffffffff8211156110ac576110ac61104b565b5060051b60200190565b600082601f8301126110c757600080fd5b81356110da6110d582611092565b611061565b8082825260208201915060208360051b8601019250858311156110fc57600080fd5b602085015b83811015611119578035835260209283019201611101565b5095945050505050565b600067ffffffffffffffff82111561113d5761113d61104b565b50601f01601f191660200190565b600082601f83011261115c57600080fd5b813561116a6110d582611123565b81815284602083860101111561117f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156111b457600080fd5b85356111bf81611033565b945060208601356111cf81611033565b9350604086013567ffffffffffffffff8111156111eb57600080fd5b6111f7888289016110b6565b935050606086013567ffffffffffffffff81111561121457600080fd5b611220888289016110b6565b925050608086013567ffffffffffffffff81111561123d57600080fd5b6112498882890161114b565b9150509295509295909350565b600080600080600060a0868803121561126e57600080fd5b853561127981611033565b9450602086013561128981611033565b93506040860135925060608601359150608086013567ffffffffffffffff81111561123d57600080fd5b60005b838110156112ce5781810151838201526020016112b6565b50506000910152565b60006112e56110d584611123565b90508281528383830111156112f957600080fd5b6113078360208301846112b3565b9392505050565b600082601f83011261131f57600080fd5b815161132d6110d582611092565b8082825260208201915060208360051b86010192508583111561134f57600080fd5b602085015b83811015611119578051835260209283019201611354565b600082601f83011261137d57600080fd5b611307838351602085016112d7565b6000806000606084860312156113a157600080fd5b835167ffffffffffffffff8111156113b857600080fd5b8401601f810186136113c957600080fd5b80516113d76110d582611092565b8082825260208201915060208360051b8501019250888311156113f957600080fd5b602084015b8381101561144f57805167ffffffffffffffff81111561141d57600080fd5b8501603f81018b1361142e57600080fd5b6114408b6020830151604084016112d7565b845250602092830192016113fe565b5080965050505050602084015167ffffffffffffffff81111561147157600080fd5b61147d8682870161130e565b925050604084015167ffffffffffffffff81111561149a57600080fd5b6114a68682870161136c565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610302576103026114c6565b60006020828403121561150157600080fd5b8151801515811461130757600080fd5b805163ffffffff8116811461152557600080fd5b919050565b60008060006060848603121561153f57600080fd5b835161154a81611033565b925061155860208501611511565b9150604084015167ffffffffffffffff8116811461157557600080fd5b809150509250925092565b600081518084526115988160208601602086016112b3565b601f01601f19169290920160200192915050565b87815260e0602082015260006115c560e0830189611580565b6001600160a01b03978816604084015295909616606082015267ffffffffffffffff938416608082015263ffffffff9290921660a083015290911660c0909101529392505050565b60006020828403121561161f57600080fd5b5051919050565b63ffffffff8181168382160190811115610302576103026114c6565b60006020828403121561165457600080fd5b61130782611511565b6000825161166f8184602087016112b3565b9190910192915050565b8281526040602082015260006116926040830184611580565b949350505050565b61ffff8181168382160190811115610302576103026114c6565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a0608082015260006116f160a0830184611580565b979650505050505050565b600081518084526020840193506020830160005b8281101561172e578151865260209586019590910190600101611710565b5093949350505050565b6001600160a01b03861681526001600160a01b038516602082015260a06040820152600061176960a08301866116fc565b828103606084015261177b81866116fc565b9050828103608084015261178f8185611580565b9897505050505050505056fea2646970667358221220c118eafa5f808a8566ff2cd129d1427e41be756e6a11724d15f22bd6e2f98a7164736f6c634300081a0033`
	})
	return await client.waitForTransactionReceipt({ hash })
}

export const callPetalLock = async (account: AccountAddress, domainInfos: DomainInfo[], contentHash: string) => {
	const client = createWriteClient(account)
	const petalLockAddress = `0xe49867d81af74b96c14b50881d7686a93b91efe2`
	const subdomainRouteNames = domainInfos.map((x) => x.subDomain)
	const labels = subdomainRouteNames.map((p) => {
		const [label] = p.split('.')
		if (label === undefined) throw new Error('not valid')
		return label
	})
	const subdomainRouteNodes = subdomainRouteNames.map((pathPart) => namehash(pathPart))
	const contenthash = tryEncodeContentHash(contentHash)
	if (contenthash === undefined) throw new Error('content hash')

	if (subdomainRouteNodes[0] === undefined) throw new Error('not exist')
	const ownedTokens = domainInfos.filter((info) => info.registered).map((info) => BigInt(info.nameHash))
	const data = encodeAbiParameters([
		{ name: 'labels', type: 'string[]' },
		{ name: 'subdomainRouteNodes', type: 'bytes32[]' },
		{ name: 'contenthash', type: 'bytes' },
	], [labels, subdomainRouteNodes, contenthash])
	const hash = await client.writeContract({
		chain: mainnet,
		account,
		address: ENS_TOKEN_WRAPPER,
		abi: ENS_WRAPPER_ABI, 
		functionName: 'safeBatchTransferFrom',
		args: [account, petalLockAddress, ownedTokens, ownedTokens.map(() => 1n), data]
	})

	return await client.waitForTransactionReceipt({ hash })
}

export const getRightSigningAddress = (transaction: 'setContentHash' | 'wrapParent' | 'wrapChild' | 'parentFuses' | 'childFuses' | 'subDomainOwnership' | 'createChild', childInfo: DomainInfo, parentInfo: DomainInfo) => {
	switch(transaction) {
		case 'setContentHash': return childInfo.owner
		case 'createChild': return parentInfo.isWrapped ? parentInfo.owner : parentInfo.registeryOwner
		case 'wrapChild': return childInfo.manager
		case 'wrapParent': return parentInfo.registeryOwner
		case 'parentFuses': return parentInfo.owner
		case 'childFuses': return parentInfo.owner
		case 'subDomainOwnership': return childInfo.owner
		default: assertNever(transaction)
	}
}
