{"version":3,"file":"OptionalSignal.js","sourceRoot":"","sources":["../../ts/utils/OptionalSignal.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AAC/C,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAA;AAEtC,MAAM,OAAO,cAAkB,SAAQ,MAA6B;IAC3D,KAAK,CAAuB;IAEpC,YAAmB,KAAgC,EAAE,cAAwB;QAC5E,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACzB,KAAK,CAAC,SAAS,CAAC,CAAA;QACjB,CAAC;aAAM,IAAI,KAAK,YAAY,MAAM,EAAE,CAAC;YACpC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;YACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QACnB,CAAC;aAAM,CAAC;YACP,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAA;YAC/B,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;YACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QACnB,CAAC;IACF,CAAC;IAEM,KAAK;QACX,IAAI,CAAC,KAAK,GAAG,SAAS,CAAA;IACvB,CAAC;IAED,IAAW,SAAS;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;QACxB,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,SAAS,CAAA;;YACpC,OAAO,KAAK,CAAC,KAAK,CAAA;IACxB,CAAC;IAEM,QAAQ;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;QACzB,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,SAAS,CAAA;;YACpC,OAAO,KAAK,CAAC,IAAI,EAAE,CAAA;IACzB,CAAC;IAED,IAAW,SAAS,CAAC,QAAuB;QAC3C,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAA;QACvB,CAAC;aAAM,CAAC;YACP,KAAK,CAAC,GAAG,EAAE;gBACV,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS;oBAAE,IAAI,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAA;;oBAC1D,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAA;gBAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;YACxB,CAAC,CAAC,CAAA;QACH,CAAC;IACF,CAAC;CACD;AAED,MAAM,UAAU,iBAAiB,CAAI,KAAgC,EAAE,cAAwB;IAC9F,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,cAAc,CAAI,KAAK,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;AACxE,CAAC","sourcesContent":["import { batch, Signal } from '@preact/signals'\nimport { useMemo } from 'preact/hooks'\n\nexport class OptionalSignal<T> extends Signal<Signal<T> | undefined> {\n\tprivate inner: Signal<T> | undefined\n\n\tpublic constructor(value: Signal<T> | T | undefined, startUndefined?: boolean) {\n\t\tif (value === undefined) {\n\t\t\tsuper(undefined)\n\t\t} else if (value instanceof Signal) {\n\t\t\tsuper(startUndefined ? undefined : value)\n\t\t\tthis.inner = value\n\t\t} else {\n\t\t\tconst inner = new Signal(value)\n\t\t\tsuper(startUndefined ? undefined : inner)\n\t\t\tthis.inner = inner\n\t\t}\n\t}\n\n\tpublic clear() {\n\t\tthis.value = undefined\n\t}\n\n\tpublic get deepValue() {\n\t\tconst inner = this.value\n\t\tif (inner === undefined) return undefined\n\t\telse return inner.value\n\t}\n\n\tpublic deepPeek() {\n\t\tconst inner = this.peek()\n\t\tif (inner === undefined) return undefined\n\t\telse return inner.peek()\n\t}\n\n\tpublic set deepValue(newValue: T | undefined) {\n\t\tif (newValue === undefined) {\n\t\t\tthis.value = undefined\n\t\t} else {\n\t\t\tbatch(() => {\n\t\t\t\tif (this.inner === undefined) this.inner = new Signal(newValue)\n\t\t\t\telse this.inner.value = newValue\n\t\t\t\tthis.value = this.inner\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport function useOptionalSignal<T>(value: Signal<T> | T | undefined, startUndefined?: boolean) {\n\treturn useMemo(() => new OptionalSignal<T>(value, startUndefined), []);\n}\n"]}