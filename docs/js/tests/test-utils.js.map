{"version":3,"file":"test-utils.js","sourceRoot":"","sources":["../../ts/tests/test-utils.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAe,EAAmB,EAAE,CAAC,KAAM,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAE,EAAE,CAAA;AAElH,MAAM,UAAU,kBAAkB,CAAC,KAAa,EAAE,aAAqB;IACtE,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;IACpD,IAAI,KAAK,IAAI,EAAE,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,cAAe,KAAM,WAAY,aAAc,yBAAyB,CAAC,CAAA;IACrJ,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,CAAA;IAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QACxC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAA;IAC1E,CAAC;IACD,OAAO,MAAM,CAAA;AACd,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,IAAY;IAC9C,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;IACxC,IAAI,UAAU,KAAK,CAAC;QAAE,OAAO,IAAI,UAAU,EAAE,CAAA;IAC7C,OAAO,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAA;AACpD,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAiB;IAChD,IAAI,KAAK,GAAG,EAAE,CAAA;IACd,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QAC1B,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA;IACrC,CAAC;IACD,OAAO,KAAK,CAAA;AACb,CAAC;AAED,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,GAAW,EAAU,EAAE;IACtD,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;QAAE,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACjD,OAAO,GAAG,CAAA;AACX,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,MAA2B,EAAE,EAAE;IACzD,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAA;AAClG,CAAC,CAAA","sourcesContent":["import { EthSimulateV1Result } from \"./ethSimulate-types\"\n\nexport const addressString = (address: bigint): `0x${ string }` => `0x${ address.toString(16).padStart(40, '0') }`\n\nexport function bigintToUint8Array(value: bigint, numberOfBytes: number) {\n\tif (typeof value === 'number') value = BigInt(value)\n\tif (value >= 2n ** BigInt(numberOfBytes * 8) || value < 0n) throw new Error(`Cannot fit ${ value } into a ${ numberOfBytes }-byte unsigned integer.`)\n\tconst result = new Uint8Array(numberOfBytes)\n\tfor (let i = 0; i < result.length; ++i) {\n\t\tresult[i] = Number((value >> BigInt(numberOfBytes - i - 1) * 8n) & 0xffn)\n\t}\n\treturn result\n}\n\nexport function stringToUint8Array(data: string) {\n\tconst dataLength = (data.length - 2) / 2\n\tif (dataLength === 0) return new Uint8Array()\n\treturn bigintToUint8Array(BigInt(data), dataLength)\n}\n\nexport function bytesToUnsigned(bytes: Uint8Array): bigint {\n\tlet value = 0n\n\tfor (const byte of bytes) {\n\t\tvalue = (value << 8n) + BigInt(byte)\n\t}\n\treturn value\n}\n\nexport const removeEthSuffix = (str: string): string => {\n\tif (str.endsWith('.eth')) return str.slice(0, -4)\n\treturn str\n}\n\nexport const allSuccess = (result: EthSimulateV1Result) => {\n\treturn result.flatMap((x) => x.calls.map((x) => x.status === 'success')).every((a) => a === true)\n}\n"]}