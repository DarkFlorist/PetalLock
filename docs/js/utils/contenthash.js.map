{"version":3,"file":"contenthash.js","sourceRoot":"","sources":["../../ts/utils/contenthash.ts"],"names":[],"mappings":"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","sourcesContent":["import { varint } from 'multiformats'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base36 } from 'multiformats/bases/base36'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base64url } from 'multiformats/bases/base64'\nimport { CID } from 'multiformats/cid'\nimport { create as createDigest, decode as multihashDecode } from 'multiformats/hashes/digest'\nimport { assertNever } from './utilities.js'\n\nexport const codeToName = {\n\t0xe3: 'ipfs',\n\t0xe4: 'swarm',\n\t0xe5: 'ipns',\n\t0x01bc: 'onion',\n\t0x01bd: 'onion3',\n\t0xb19910: 'skynet',\n\t0xb29910: 'arweave',\n} as const\n\nexport const nameToCode = {\n\tipfs: 0xe3,\n\tswarm: 0xe4,\n\tipns: 0xe5,\n\tonion: 0x01bc,\n\tonion3: 0x01bd,\n\tskynet: 0xb19910,\n\tarweave: 0xb29910,\n} as const;\n\ntype CodecId = keyof typeof codeToName\n\nconst hexStringToBytes = (hex: string): Uint8Array => {\n\tlet value: string = hex\n\tif (value.startsWith('0x')) value = value.slice(2)\n\tif (value.length % 2 !== 0) throw new Error('Invalid hex string')\n\tconst bytes = new Uint8Array(value.length / 2)\n\tfor (let i = 0; i < value.length; i += 2) {\n\t\tbytes[i / 2] = parseInt(value.slice(i, i + 2), 16)\n\t}\n\treturn bytes\n}\n\nconst bytesToHexString = (bytes: Uint8Array): `0x${ string }` => {\n\tlet hex = ''\n\tfor (let i = 0; i < bytes.length; i++) {\n\t\tconst b = bytes[i]\n\t\tif (b == undefined) throw new Error('length misalign')\n\t\thex += b.toString(16).padStart(2, '0')\n\t}\n\treturn `0x${ hex }`\n}\n\nconst isCryptographicIPNS = (cid: CID): boolean => {\n\ttry {\n\t\tconst { multihash } = cid\n\t\tif (multihash.size < 38) {\n\t\t\tconst mh = multihashDecode(multihash.bytes)\n\t\t\tif (mh.code === 0x0 && mh.size < 36) return false\n\t\t}\n\t\treturn true\n\t} catch {\n\t\treturn false\n\t}\n}\n\nconst base64Decode = (value: string): Uint8Array => base64url.decode(`u${value}`)\n\nconst encodes = {\n\tskynet: (value: string): Uint8Array => base64Decode(value),\n\tswarm: (value: string): Uint8Array => {\n\t\tconst bytes = hexStringToBytes(value)\n\t\tconst multihash = createDigest(0x1b, bytes)\n\t\treturn CID.create(1, 0xfa, multihash).bytes\n\t},\n\tipfs: (value: string): Uint8Array => CID.parse(value).toV1().bytes,\n\tipns: (value: string): Uint8Array => {\n\t\tlet cid: CID\n\t\ttry {\n\t\t\tcid = CID.parse(value, value.startsWith('k') ? base36 : undefined)\n\t\t} catch (e) {\n\t\t\tconst bytes = base58btc.decode(`z${value}`)\n\t\t\tcid = new CID(0, 0x72, createDigest(0x00, bytes.slice(2)), bytes)\n\t\t}\n\t\tif (!isCryptographicIPNS(cid)) throw new Error('not supported')\n\t\treturn CID.create(1, 0x72, cid.multihash).bytes\n\t},\n\tutf8: (value: string): Uint8Array => {\n\t\tconst encoder = new TextEncoder()\n\t\treturn encoder.encode(value)\n\t},\n\tarweave: (value: string): Uint8Array => base64Decode(value),\n}\n\nconst decodes = {\n\thexMultiHash: (value: Uint8Array): string => {\n\t\tconst cid = CID.decode(value)\n\t\treturn bytesToHexString(multihashDecode(cid.multihash.bytes).digest)\n\t},\n\tipfs: (value: Uint8Array): string => {\n\t\tconst cid = CID.decode(value).toV1()\n\t\treturn cid.toString(cid.code === 0x72 ? base36 : base32)\n\t},\n\tipns: (value: Uint8Array): string => {\n\t\tconst cid = CID.decode(value).toV1()\n\t\tif (!isCryptographicIPNS(cid)) throw new Error('not supported')\n\t\treturn cid.toString(base36)\n\t},\n\tutf8: (value: Uint8Array): string => {\n\t\tconst decoder = new TextDecoder()\n\t\treturn decoder.decode(value)\n\t},\n\tbase64: (value: Uint8Array): string => {\n\t\treturn base64url.encode(value).substring(1)\n\t},\n}\n\nexport const encodeContentHash = (name: string, value: string): `0x${ string }` => {\n\tconst encode = () => {\n\t\tswitch(name) {\n\t\t\tcase 'arweave': return encodes.arweave(value)\n\t\t\tcase 'ipfs': return encodes.ipfs(value)\n\t\t\tcase 'ipns': return encodes.ipns(value)\n\t\t\tcase 'skynet': return encodes.skynet(value)\n\t\t\tcase 'swarm': return encodes.swarm(value)\n\t\t\tdefault: return encodes.utf8(value)\n\t\t}\n\t}\n\tconst bytes = encode()\n\tconst code = nameToCode[name as keyof typeof nameToCode] as number\n\tconst codeBytes = varint.encodeTo(code, new Uint8Array(varint.encodingLength(code)))\n\treturn bytesToHexString(new Uint8Array([...codeBytes, ...bytes]))\n}\n\nexport const decodeContentHash = (contentHash: string): string => {\n\tconst bytes = hexStringToBytes(contentHash)\n\tconst [code, offset] = varint.decode(bytes)\n\tconst value = bytes.slice(offset)\n\tif (!(code in codeToName)) throw new Error('invalid protocol')\n\tconst name = codeToName[code as CodecId]\n\tconst withProtocol = (hash: string) => `${ name }://${ hash }`\n\tswitch(name) {\n\t\tcase 'arweave': return withProtocol(decodes.base64(value))\n\t\tcase 'ipfs': return withProtocol(decodes.ipfs(value))\n\t\tcase 'ipns': return withProtocol(decodes.ipns(value))\n\t\tcase 'onion': return withProtocol(decodes.utf8(value))\n\t\tcase 'onion3': return withProtocol(decodes.utf8(value))\n\t\tcase 'skynet': return withProtocol(decodes.base64(value))\n\t\tcase 'swarm': return withProtocol(decodes.hexMultiHash(value))\n\t\tdefault: assertNever(name)\n\t}\n}\n\nexport const tryDecodeContentHash = (contentHash: string) => {\n\ttry {\n\t\treturn decodeContentHash(contentHash)\n\t} catch(e) {\n\t\treturn undefined\n\t}\n}\n\nexport const tryEncodeContentHash = (contentHash: string) => {\n\ttry {\n\t\tconst [codec, hash] = contentHash.split('://')\n\t\tif (codec === undefined || hash === undefined) throw new Error('invalid hash')\n\t\treturn encodeContentHash(codec, hash)\n\t} catch(e) {\n\t\treturn undefined\n\t}\n}\n\nexport const isValidContentHashString = (input: string) => tryEncodeContentHash(input) !== undefined\n"]}