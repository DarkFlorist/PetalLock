{"version":3,"file":"ethSimulate.js","sourceRoot":"","sources":["../../ts/tests/ethSimulate.ts"],"names":[],"mappings":"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","sourcesContent":["import { EthSimulateV1Params } from './ethSimulate-types.js'\nimport * as funtypes from 'funtypes'\nimport { serialize } from './wire-types.js'\n\ntype JsonRpcSuccessResponse = funtypes.Static<typeof JsonRpcSuccessResponse>\nconst JsonRpcSuccessResponse = funtypes.ReadonlyObject({\n\tjsonrpc: funtypes.Literal('2.0'),\n\tid: funtypes.Union(funtypes.String, funtypes.Number),\n\tresult: funtypes.Unknown,\n}).asReadonly()\n\nexport type JsonRpcErrorResponse = funtypes.Static<typeof JsonRpcErrorResponse>\nexport const JsonRpcErrorResponse = funtypes.ReadonlyObject({\n\tjsonrpc: funtypes.Literal('2.0'),\n\tid: funtypes.Union(funtypes.String, funtypes.Number),\n\terror: funtypes.ReadonlyObject({\n\t\tcode: funtypes.Number,\n\t\tmessage: funtypes.String,\n\t\tdata: funtypes.Unknown,\n\t}).asReadonly(),\n}).asReadonly()\n\nexport type JsonRpcResponse = funtypes.Static<typeof JsonRpcResponse>\nexport const JsonRpcResponse = funtypes.Union(JsonRpcErrorResponse, JsonRpcSuccessResponse)\n\nexport type EthereumJsonRpcRequest = funtypes.Static<typeof EthereumJsonRpcRequest>\nexport const EthereumJsonRpcRequest = funtypes.Union(EthSimulateV1Params)\n\nclass ErrorWithData extends Error {\n\tpublic constructor(message: string, public data: unknown) {\n\t\tsuper(message)\n\t}\n}\n\nexport class JsonRpcResponseError extends ErrorWithData {\n\tpublic readonly id: string | number\n\tpublic readonly code: number\n\tpublic constructor(jsonRpcResponse: JsonRpcErrorResponse) {\n\t\tsuper(jsonRpcResponse.error.message, jsonRpcResponse.error.data)\n\t\tthis.code = jsonRpcResponse.error.code\n\t\tthis.id = jsonRpcResponse.id\n\t}\n}\n\nexport const jsonRpcRequest = async (url: string, rpcRequest: EthereumJsonRpcRequest) => {\n\tconst serialized = serialize(EthereumJsonRpcRequest, rpcRequest)\n\tconst payload = {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify({ jsonrpc: '2.0', id: 1, ...serialized })\n\t}\n\tconst response = await fetch(url, payload)\n\tconst responseObject = response.ok ? { responseState: 'success' as const, response: await response.json() } : { responseState: 'failed' as const, response }\n\tif (responseObject.responseState === 'failed') {\n\t\tthrow new Error(`Query to RPC server failed with error code: ${ responseObject.response.status } while quering for ${ rpcRequest.method }.`)\n\t}\n\tconst jsonRpcResponse = JsonRpcResponse.parse(responseObject.response)\n\tif ('error' in jsonRpcResponse) throw new JsonRpcResponseError(jsonRpcResponse)\n\treturn jsonRpcResponse.result\n}\n"]}